{"version":3,"sources":["CustomModal.js","App.js","actions/index.js","actions/types.js","serviceWorker.js","reducers/notesReducer.js","reducers/index.js","store.js","index.js"],"names":["CustomModal","Modal","show","this","props","onHide","handleClose","Header","closeButton","Title","Body","FormControl","as","aria-label","onChange","handleChange","id","validation","Footer","Button","variant","onClick","handleSaveChanges","saving","Component","App","setState","handleShow","error","e","text","target","value","state","addNote","content","then","res","addANote","data","catch","err","setTimeout","getNotes","Container","Row","notes","loading","length","map","note","key","_id","Alert","connect","dispatch","type","axios","get","payload","post","Boolean","window","location","hostname","match","initialState","combineReducers","action","concat","middleWare","thunk","store","createStore","rootReducer","compose","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe41d0f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button,Modal,FormControl } from 'react-bootstrap';\nclass CustomModal extends Component {\n    render() {\n        return (\n            <div>\n                <Modal show={this.props.show} onHide={this.props.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Enter text</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <FormControl as=\"textarea\" aria-label=\"Enter text here\" onChange={this.props.handleChange}/>\n                        <p id=\"validation-err\">{this.props.validation}</p>\n                    </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={this.props.handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={this.props.handleSaveChanges}>\n                    {this.props.saving ? \"Saving..\" : \"Save Changes\"}\n                </Button>\n            </Modal.Footer>\n            </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CustomModal;","import React,{Component}from 'react';\nimport { Button,Container,Row,Alert } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport { getNotes,addNote,addANote } from \"./actions/index\";\nimport CustomModal from \"./CustomModal\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\nclass App extends Component{\n constructor(props){\n   super(props);\n   this.state = { show:false, text:\"\", saving:false, error:\"\", validation:\"\"}\n }\n componentDidMount(){\n   this.props.getNotes();\n }\n handleClose = () => this.setState({show:false})\n\n handleShow = () => this.setState({show:true,error:\"\",validation:\"\"})\n\n handleChange = (e) => this.setState({text:e.target.value,validation:\"\"})\n\n handleSaveChanges = () => {\n   if(this.state.text){\n   this.setState({saving:true});\n   this.props.addNote({content:this.state.text})\n   .then(res=>\n    {\n     this.props.addANote([res.data]);\n     this.setState({saving:false,show:false});\n    })\n    .catch(err =>\n      {\n        this.setState({error:\"Could not save...Please try again!\",show:false});\n        setTimeout(()=>this.setState({error:\"\"}),2000);\n      })\n    }\n    else\n    {\n      this.setState({validation:\"Text is required!\"});\n    }\n }\n\nrender(){\n  return (\n    <Container>\n      <Row>\n        <Button variant=\"primary\" onClick={this.handleShow} id=\"text-btn\">Click to add a Note</Button>\n      </Row>\n    <Row>\n      <h4>List of Notes..</h4>\n      <ul>\n      {\n        this.props.notes.loading ? \n        \"Loading...\"\n        :\n        this.props.notes.data.length > 0 ? \n          this.props.notes.data.map(note=><li key={note._id}>{note.content}</li>)\n          :\"No notes to display!\"\n      }\n      </ul>\n    </Row>\n    <Row>\n      {this.state.error?\n      <Alert variant=\"danger\">{this.state.error}</Alert>\n      :\n      null}\n    </Row>\n    <CustomModal \n    validation={this.state.validation} \n    handleClose={this.handleClose} \n    handleShow={this.handleShow} \n    handleChange={this.handleChange} \n    handleSaveChanges={this.handleSaveChanges} \n    show={this.state.show}/>\n    </Container>\n  );\n}\n}\n\nconst mapStateToProps = state => ({\n  notes: state.notes\n});\n\nexport default connect(\n  mapStateToProps,\n  { getNotes,addNote,addANote }\n)(App);\n","import axios from \"axios\";\nimport {GET_NOTES,SET_LOADER,ADD_NOTE} from \"./types\";\n\nconst setLoader = () => {\n    return {\n      type: SET_LOADER\n    };\n  };\n  export const addANote = (data) => {\n    return {\n      type: ADD_NOTE,\n      payload : data\n    };\n  };\nexport const addNote = data => dispatch => {\n    return axios.post(\"/api/notes\", data)\n  };\n  \n  // Get Posts\nexport const getNotes = () => dispatch => {\n    dispatch(setLoader());\n    axios\n      .get(\"/api/notes\")\n      .then(res =>\n        {\n        dispatch({\n          type: GET_NOTES,\n          payload: res.data\n        })\n       }\n      )\n      .catch(err =>\n        dispatch({\n          type: GET_NOTES,\n          payload: null\n        })\n      );\n  };","export const GET_NOTES=\"getNotes\";\nexport const SET_LOADER = \"setLoader\";\nexport const ADD_NOTE = \"addNote\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_NOTES,SET_LOADER,ADD_NOTE} from \"../actions/types\";\nconst initialState = {\n    data: [],\n    loading: false\n  };\n  \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case SET_LOADER:\n        return {\n          ...state,\n          loading: true\n        };\n      case GET_NOTES:\n        return {\n          ...state,\n          data: action.payload,\n          loading: false\n        };\n        case ADD_NOTE:\n            return {\n                data:state.data.concat(action.payload),\n                loading:false\n            }\n      default:\n        return {...state}\n    }\n}","import { combineReducers } from \"redux\";\nimport notesReducer from \"./notesReducer\";\n\nexport default combineReducers({\n    notes:notesReducer\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst middleWare = [thunk];\n\nconst initialState = {};\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleWare)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n//rootreducer\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}